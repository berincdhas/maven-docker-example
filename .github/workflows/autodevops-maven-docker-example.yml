name: autodevops-maven-docker-example

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: autodevops-maven-docker-example-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  monitoring:
    name: Monitoring & Alerting Setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 5
    steps:
      - name: Set up Prometheus metrics exporter (if needed)
        run: echo "Prometheus exporter setup would go here."
      - name: Azure Monitor integration
        run: echo "Azure Monitor integration step."
      - name: Grafana dashboard config
        run: echo "Grafana dashboard configuration step."

  analysis:
    name: Checkout, Dependency Management & Code Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Dependency installation (Maven)
        run: mvn --batch-mode --update-snapshots dependency:resolve
      - name: Check for Makefile and deps target
        run: |
          if [ -f Makefile ] && grep -q '^deps:' Makefile; then
            make deps
          fi
      - name: Fail if required secrets are missing
        run: |
          if [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "SONAR_TOKEN secret is not set. Please add it to the repository secrets."
            exit 1
          fi
        shell: bash
      - name: Static code analysis - SonarQube
        uses: sonarsource/sonarcloud-github-action@v2.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Dependency scan - Dependabot
        run: echo "Dependabot scanning (automatic via GitHub platform)"

  build:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: analysis
    if: ${{ needs.analysis.result == 'success' }}
    permissions:
      contents: read
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn --batch-mode package
      - name: Run tests
        run: mvn test

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.result == 'success' }}
    permissions:
      contents: read
      packages: write
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Fail if required DockerHub secrets are missing
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "DOCKERHUB_USERNAME or DOCKERHUB_TOKEN secret is not set. Please add both to the repository secrets."
            exit 1
          fi
        shell: bash
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/maven-docker-example:latest

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: docker
    if: ${{ needs.docker.result == 'success' }}
    permissions:
      contents: read
    timeout-minutes: 15
    steps:
      - name: Fail if required KUBECONFIG secret is missing
        run: |
          if [ -z "${{ secrets.KUBECONFIG }}" ]; then
            echo "KUBECONFIG secret is not set. Please add it to the repository secrets."
            exit 1
          fi
        shell: bash
      - name: Set up Kubeconfig
        run: echo "${{ secrets.KUBECONFIG }}" > kubeconfig && export KUBECONFIG=$PWD/kubeconfig
      - name: Deploy to cluster
        run: |
          kubectl set image deployment/maven-docker-example maven-docker-example=${{ secrets.DOCKERHUB_USERNAME }}/maven-docker-example:latest