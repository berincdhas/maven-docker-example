name: autodevops-maven-docker-example

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      registry:
        description: 'Container registry URL'
        default: 'autodevopsacr.azurecr.io'
        required: true
      git_credentials:
        description: 'Kubernetes secret name for Git credentials'
        default: 'git-credentials'
        required: true
      registry_secret:
        description: 'Kubernetes secret name for container registry'
        default: 'acr-credentials'
        required: true
      azure_secret:
        description: 'Kubernetes secret name for Azure SP'
        default: 'azure-credentials'
        required: true
      app_namespace:
        description: 'Kubernetes deployment namespace'
        default: 'argo'
        required: true
      resourceGroup:
        description: 'Azure resource group'
        default: 'sda-auto-devops-demo'
        required: true

concurrency:
  group: autodevops-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  REGISTRY: ${{ github.event.inputs.registry || 'autodevopsacr.azurecr.io' }}
  GIT_CREDENTIALS_SECRET: ${{ github.event.inputs.git_credentials || 'git-credentials' }}
  REGISTRY_SECRET: ${{ github.event.inputs.registry_secret || 'acr-credentials' }}
  AZURE_SECRET: ${{ github.event.inputs.azure_secret || 'azure-credentials' }}
  APP_NAMESPACE: ${{ github.event.inputs.app_namespace || 'argo' }}
  RESOURCE_GROUP: ${{ github.event.inputs.resourceGroup || 'sda-auto-devops-demo' }}

jobs:

  checkout-dependencies-codequality:
    name: Checkout, Dependency Management & Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Dependency installation (Maven)
        run: mvn --batch-mode dependency:resolve

      - name: Dependency installation (Make)
        if: ${{ hashFiles('Makefile') != '' }}
        run: make deps

      - name: Static code analysis - SonarQube
        uses: sonarsource/sonarcloud-github-action@v2.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository }}
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.java.binaries=target/
        continue-on-error: true

      - name: Dependency scan - Dependabot
        uses: dependabot/fetch-metadata@v2
        with:
          alert-branch: ${{ github.ref }}

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: checkout-dependencies-codequality
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Unit & Integration Testing (Maven)
        run: mvn --batch-mode test

  build-artifact:
    name: Build, Package & Containerize
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 20
    outputs:
      image_tag: ${{ steps.meta.outputs.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build Java artifact
        run: mvn --batch-mode package

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Docker login (ACR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg JAR_FILE=target/*.jar \
            -t ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.meta.outputs.sha }} \
            -t ${{ env.REGISTRY }}/${{ github.repository }}:latest \
            .

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@v0.13.1
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.meta.outputs.sha }}
          format: table
          exit-code: 1
          ignore-unfixed: true

      - name: Publish Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.meta.outputs.sha }}
          docker push ${{ env.REGISTRY }}/${{ github.repository }}:latest

      - name: Publish Maven artifact to Azure Artifacts/Nexus (optional)
        if: ${{ always() }}
        run: echo "Implement Nexus/Azure Artifacts upload here if configured"
        env:
          NEXUS_USER: ${{ secrets.NEXUS_USER }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

  deploy-staging:
    name: Deploy to Staging (AKS/Azure Container Apps)
    runs-on: ubuntu-latest
    needs: build-artifact
    timeout-minutes: 20
    environment:
      name: staging
      url: ${{ steps.deploy_app.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          admin: false

      - name: Deploy application manifest (Kubernetes)
        id: deploy_app
        uses: azure/k8s-deploy@v5
        with:
          action: deploy
          manifests: |
            ./k8s/deployment.yaml
            ./k8s/service.yaml
          namespace: ${{ env.APP_NAMESPACE }}
          images: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-artifact.outputs.image_tag }}
          imagepullsecrets: ${{ env.REGISTRY_SECRET }}

  acceptance-e2e-tests:
    name: Acceptance & End-to-End Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run acceptance/E2E test suite
        run: |
          echo "Implement E2E testing here (e.g., mvn verify, pytest, etc.)"
        env:
          TEST_ENV_API_URL: ${{ needs.deploy-staging.outputs.app_url }}

  policy-compliance:
    name: Policy & Compliance Checks
    runs-on: ubuntu-latest
    needs: acceptance-e2e-tests
    timeout-minutes: 10
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Validate Azure policy/compliance
        run: |
          # Example for Azure Policy evaluation
          az policy state list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?complianceState=='NonCompliant']"
        continue-on-error: true

  deploy-production:
    name: Deploy to Production (AKS/Azure Container Apps)
    runs-on: ubuntu-latest
    needs: policy-compliance
    timeout-minutes: 25
    environment:
      name: production
      url: ${{ steps.deploy_app.outputs.app_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          admin: false

      - name: Deploy application manifest (Kubernetes)
        id: deploy_app
        uses: azure/k8s-deploy@v5
        with:
          action: deploy
          manifests: |
            ./k8s/deployment.yaml
            ./k8s/service.yaml
          namespace: ${{ env.APP_NAMESPACE }}
          images: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-artifact.outputs.image_tag }}
          imagepullsecrets: ${{ env.REGISTRY_SECRET }}

      - name: Monitor deployment health
        run: |
          echo "Implement automated post-deploy health and compliance checks here"

  monitoring-alerting:
    name: Monitoring & Alerting Setup
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: deploy-production
    timeout-minutes: 10
    steps:
      - name: Set up Prometheus metrics exporter (if needed)
        run: echo "Instrumentation and Prometheus exporter setup"

      - name: Azure Monitor integration
        run: echo "Configure Azure Monitor here if not already setup"

      - name: Grafana dashboard config
        run: echo "Configure Grafana dashboards and alerts if not already setup"