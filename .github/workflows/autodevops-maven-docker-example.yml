name: autodevops-maven-docker-example

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

concurrency:
  group: autodevops-maven-docker-example-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: 17
  MAVEN_OPTS: -Dmaven.repo.local=.m2/repository
  SONAR_PROJECT_KEY: ${{ github.repository }}
  SONAR_ORGANIZATION: ""
  SONAR_HOST_URL: "https://sonarcloud.io"

permissions:
  contents: read
  packages: write

jobs:

  pre-check:
    name: "Repository Pre-Check"
    runs-on: ubuntu-latest
    outputs:
      has_pom: ${{ steps.check_pom.outputs.found }}
      has_sonar_token: ${{ steps.check_sonar.outputs.has_sonar_token }}
    timeout-minutes: 3
    steps:
      - name: 'Check for pom.xml'
        id: check_pom
        run: |
          if [ -f pom.xml ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi
      - name: 'Check for SONAR_TOKEN Secret'
        id: check_sonar
        run: |
          if [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "has_sonar_token=false" >> $GITHUB_OUTPUT
          else
            echo "has_sonar_token=true" >> $GITHUB_OUTPUT
          fi

  guard-pom-not-found:
    name: "pom.xml Not Found Guard"
    needs: pre-check
    if: needs.pre-check.outputs.has_pom == 'false'
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: 'Fail Build - pom.xml Missing'
        run: |
          echo "Workflow terminated: pom.xml file not found in root of repository. Please add pom.xml to proceed."
          exit 1

  checkout:
    name: "Checkout Code"
    needs: pre-check
    if: needs.pre-check.outputs.has_pom == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4

  set-up-java:
    name: "Set Up Java"
    needs: checkout
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

  cache-maven:
    name: "Cache Maven Repo"
    needs: set-up-java
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/cache@v4
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

  build:
    name: "Build with Maven"
    needs: cache-maven
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - uses: actions/cache@v4
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

  test:
    name: "Test"
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - uses: actions/cache@v4
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven
      - name: Run tests with Maven
        run: mvn -B test --file pom.xml

  code-analysis:
    name: "SonarCloud Code Analysis"
    needs: test
    if: needs.pre-check.outputs.has_sonar_token == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      - uses: actions/cache@v4
        with:
          path: .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify sonar:sonar \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=$SONAR_TOKEN

  docker-build:
    name: "Docker Build"
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy-dev:
    name: "Deploy to Dev"
    needs: docker-build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Dummy Deploy Dev
        run: echo "Pretend to deploy to Dev environment"

  deploy-staging:
    name: "Deploy to Staging"
    needs: deploy-dev
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Dummy Deploy Staging
        run: echo "Pretend to deploy to Staging environment"

  deploy-prod:
    name: "Deploy to Prod"
    needs: deploy-staging
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Dummy Deploy Prod
        run: echo "Pretend to deploy to Production environment"
