name: autodevops-maven-docker-example

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      registry:
        description: 'The container registry URL'
        required: true
        default: 'autodevopsacr.azurecr.io'
      git_credentials:
        description: 'Kubernetes secret for Git credentials'
        required: true
        default: 'git-credentials'
      registry_secret:
        description: 'Kubernetes secret for ACR credentials'
        required: true
        default: 'acr-credentials'
      azure_secret:
        description: 'Kubernetes secret for Azure service principal'
        required: true
        default: 'azure-credentials'
      app_namespace:
        description: 'Deployment namespace'
        required: true
        default: 'argo'
      resourceGroup:
        description: 'Azure resource group'
        required: true
        default: 'sda-auto-devops-demo'

concurrency:
  group: autodevops-maven-docker-example-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  id-token: write
  packages: write

env:
  REGISTRY: ${{ github.event.inputs.registry || 'autodevopsacr.azurecr.io' }}
  GIT_CREDENTIALS: ${{ github.event.inputs.git_credentials || 'git-credentials' }}
  REGISTRY_SECRET: ${{ github.event.inputs.registry_secret || 'acr-credentials' }}
  AZURE_SECRET: ${{ github.event.inputs.azure_secret || 'azure-credentials' }}
  APP_NAMESPACE: ${{ github.event.inputs.app_namespace || 'argo' }}
  RESOURCE_GROUP: ${{ github.event.inputs.resourceGroup || 'sda-auto-devops-demo' }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  checkout-build-test-analyze:
    name: Checkout, Build, Test, Analyze
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Maven Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn --batch-mode clean package

      - name: Run Unit & Integration Tests
        run: mvn --batch-mode test

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            target/surefire-reports/**
            target/failsafe-reports/**

      - name: SonarQube Analysis
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          projectBaseDir: .
        if: ${{ env.SONAR_TOKEN != '' && env.SONAR_HOST_URL != '' }}

  docker-scan-push:
    name: Docker Build, Scan, and Push
    runs-on: ubuntu-latest
    needs: checkout-build-test-analyze
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI - Get ACR Credentials
        id: acr-creds
        run: |
          az acr login --name ${{ env.REGISTRY }}
          echo "::set-output name=registry_url::${{ env.REGISTRY }}"

      - name: Build Docker image
        run: |
          DOCKER_BUILDKIT=1 docker build -t ${{ env.REGISTRY }}/maven-docker-example:${{ github.sha }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@v0.22.0
        with:
          image-ref: ${{ env.REGISTRY }}/maven-docker-example:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Docker image to Azure Container Registry
        run: |
          docker push ${{ env.REGISTRY }}/maven-docker-example:${{ github.sha }}

  infra-provision:
    name: Terraform & Ansible Provisioning
    runs-on: ubuntu-latest
    needs: docker-scan-push
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.6'

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Setup Python for Ansible
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: python -m pip install --upgrade pip ansible

      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory set-up.yml

  kubernetes-deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: [docker-scan-push, infra-provision]
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up kubectl
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AZURE_AKS_CLUSTER }}
          admin: 'false'

      - name: Create k8s secret for registry
        run: |
          kubectl create secret docker-registry ${{ env.REGISTRY_SECRET }} \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ secrets.AZURE_ACR_USERNAME }} \
            --docker-password=${{ secrets.AZURE_ACR_PASSWORD }} \
            --namespace=${{ env.APP_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to AKS via Kubernetes manifests
        run: |
          kubectl apply -n ${{ env.APP_NAMESPACE }} -f k8s/
        env:
          IMAGE_TAG: ${{ env.REGISTRY }}/maven-docker-example:${{ github.sha }}

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/maven-docker-example \
            -n ${{ env.APP_NAMESPACE }} --timeout=180s

  post-deployment-validate:
    name: Post Deployment Validation
    runs-on: ubuntu-latest
    needs: kubernetes-deploy
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up kubectl context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AZURE_AKS_CLUSTER }}
          admin: 'false'

      - name: Run healthcheck job pod
        run: |
          kubectl get deployment maven-docker-example -n ${{ env.APP_NAMESPACE }}
          kubectl get pods -n ${{ env.APP_NAMESPACE }}

      - name: End-to-End Smoke Test (optional)
        run: |
          curl --fail --retry 5 --retry-delay 5 http://maven-docker-example.${{ env.APP_NAMESPACE }}.svc.cluster.local/actuator/health

  monitoring:
    name: Monitoring & Alerts
    runs-on: ubuntu-latest
    needs: post-deployment-validate
    if: github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    steps:
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Prometheus on AKS
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus --namespace ${{ env.APP_NAMESPACE }} --create-namespace

      - name: Enable Azure Monitor for AKS
        run: |
          az aks enable-addons --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_AKS_CLUSTER }} \
            --addons monitoring

  notify-cleanup:
    name: Cleanup & Notification
    runs-on: ubuntu-latest
    needs: [monitoring, post-deployment-validate]
    timeout-minutes: 5
    if: always()
    steps:
      - name: Send pipeline status email
        uses: dawidd6/action-send-mail@v3
        if: failure() || success()
        with:
          to: ${{ secrets.NOTIFY_EMAIL_TO }}
          subject: 'autodevops-maven-docker-example pipeline ${{ job.status }}'
          body: |
            The workflow has ${{ job.status }} for commit ${{ github.sha }}.
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: 465
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          secure: true

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-logs
          path: ${{ github.workspace }}

      - name: Cleanup K8s test jobs (optional)
        run: |
          kubectl delete jobs --all -n ${{ env.APP_NAMESPACE }} || true
        continue-on-error: true